                Кондратьев А. С., Пыхалов Е. Д., Эйдельман Р. В.

              ТУТОРИАЛ ПО ВЗАИМОДЕЙСТВИЮ С МАНИПУЛЯТОРОМ "OMEGAMAN"

1. Ограничения

Манипулятор "OmegaMan" имеет 4 вращательные кинематические пары, каждая 
кинематическая пара имеет свои ограничения, которые задаются в следующем
диапазоне: 0 -- 1023 (0 -- 5П/3). Ограничения записаны в файле Arduino/Config.h.
Для нормальной работы программы изменять эти ограничения запрещено!

Согласно описанию манипулятора, схват выдерживает полезную нагрузку массой 100г.
В реальности он может выдержать без отключения только один цветной кубик из
аудитории В2.15. При подъеме груза массой выше кубика возможно отключение
одного или нескольких сервоприводов манипулятора.

2. Описание программы для платформы OpenCM9.04

Платформа OpenCM9.04 можно программировать в ArduinoIDE. Детали подключения
необходимых библиотек описаны в [3]. Наша программа в ArduinoIDE разделена на
несколько файлов: Arduino.ino - основной файл, в котором описываются функции 
setup() и loop(); Config.h - здесь описаны все константы, необходимые для
корректной работы программы; Connection.h - содержит протокол для общения с ПК
через терминал; Joint.h - модуль для расчета геометрических характеристик
манипулятора; Servo.h - модуль для взаимодействия с сервоприводами манипулятора.
Модуль Calibration.h содержит экспериментальные возможности для калибровки
манипулятора. Для обеспечения нормальной работы робота использовать данный
модуль не рекомендуется. Далее представлено более подробное описание методов,
позволяющих управлять манипулятором.

2.1. Servo.h

Существующие объекты:
servo1
servo2
servo3
servo4

Методы:
obj.set_angle(uint16_t _angle) - задать сервоприводу значение угла;
obj.set_speed(uint16_t _speed) - задать сервоприводу скорость перемещения;
Servo::setStartPosition() - Возвращает манипулятор в стартовое положение;
toolPush() - схватить объект;
toolPop() - отпустить объект;

obj.get_DXL_ID() - возвращает значение DXL_ID сервопривода;
obj.get_angle() - возвращает реальное значение угла;
obj.get_goal() - возвращает знчение угла, переданное в качестве целевого;
obj.get_load() - возвращает текущую нагрузку;
obj.is_moving() - 1 - сервопривод двигается, 2 - не двигается;
obj.get_speed() - возвращает значение заданной скорости;

Отдельного рассмотрения требует метод Servo::mv(uint16_t msg). Для его работы в
функции loop следует раскомментировать метод Servo::mv(Serial.parseInt()). На
вход данный метод принимает 5-тиразрядное число. Старший разряд кодирует DXL_ID
сервопривода, остальные разряды кодируют значение угла (0 -- 1023). Таким
образом, для задания 1-му сервоприводу угла 256 необходимо в Serial Monitor
ввести число 10256; для задания 3-му сервоприводу угла 1023 необходимо ввести
число 31023; для задания 4-му сервоприводу угла 0 необходимо ввести 40000.
Обращаем внимание, что перемещения сервоприводов будут выполнены с учетом
ограничений минимальных и максимальных значений угла. Важно помнить, что данный
метод может использоваться только для отладки и не имеет совместимости с классом
Connection, поэтому совместное их использование приведет к некорректной работе
программы.

2.2. Connection.h

Класс позволяет обмениваться сообщениями с ПК через UART. Скорость передачи
сообщений составляет 9600 baud. Интерфейс со стороны ПК будет описан позднее.

Для корректной работы класса необходимо в функции loop() раскомментировать метод
Connection::receiveCommand(). Кроме того, во время работы программы с
использованием  класса Connection запрещается использование методов класса
Serial и метода Servo::mv(uint16_t msg). Данный класс работает в автономном
режиме, и единственное, что может требовать корректировки - метод
Connection::findCommand(), который позволяет принимать с ПК новые задания,
созданные пользователем.

Для добавления нового задания следует выполнить 2 шага:
а) в файл Config.h добавить строку следующего вида
#define NEW_TASK X
где X - id нового задания (должен быть уникальным, минимальное значение - 9,
максимальное - 99).
б) в метод Connection::findCommand() добавить следующий блок
if (com == NEW_TASK) {
    return new_function(value);
}

2.3. Joint.h

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! СТРОКА - 80 СИМВОЛОВ!

3. Описание программы для ПК

Данная программа позволяет оценивать параметры манипулятора в режиме реального
времени и управлять манипулятором через терминал без использования ArduinoIDE.

Установка данной программы возможна только на ПК под управлением ОС Linux с
установленной библиотекой "ncurses". для компиляции программы необходимо
выполнить следующие шаги:
$ mkdir App/build && cd App/build
$ cmake ../CMakeLists.txt
$ make -j4
После чего в директории App/build будет доступен исполняемый файл Manipulator.
Для запуска программы необходимо перейти в директорию App/build и ввести в
терминал следующую команду:
$ ./Manipulator

При запуске программы в случае неудачной попытки подключения ПК к OpenCM9.04
будет выведена следующее сообщение:
Unable to connect

Ввод команды осуществляется за счет нажатия на клавиши клавиатуры. В случае
нажатия клавиш Backspace и Delete будет произведено удаление соответствующего
введенного символа. В случае нажатия клавиши Enter будет произведена обработка
команды. Клавиши KEY_LEFT и KEY_RIGHT позволяют перемещаться по введенной
команде. Клавиши KEY_UP и KEY_DOWN позволяют просматривать историю введенных в
рамках текущего сеанса команд. Для выхода из программы необходимо нажать
комбинацию клавиш Ctrl + C.

Для успешной отправки команды в случае, если в программе для платформы
ArduinoIDE задание уже существует, достаточно ввести в командную строку данной
программы следующее сообщение
STTVVVV
где S - DXL_ID сервопривода, TT - задание, VVVV - value (константа, в случае
отсутствия необходимости ее использования необходимо ввести сообщение
следующего вида: STT0000).

Помимо числовых команд поддерживаются текстовые команды:
home - возврат манипулятора в стартовое положение;
push - схватить объект;
pop - отпустить объект.

Для добавления пользовательских числовых команд достаточно добавить
соответствующую команду в программу для платформы OpenCM9.04 по алгоритму,
описанному выше.

Для добавления текстовой команды необходимо добавить соответствующую числовую
команду, в класс Connect (файл App/Connect.h) добавить метод, заполняющий массив
Connect::command соответствующим образом, в метод Connect::decodeKeyInput()
добавить обработку текстовой команды. Подробнее см. обработку текстовой команды
"home" в App/Connect.cpp.

4. Дополнительные материалы:

1) https://github.com/artem-kondratew/Manipulator.git - репозиторий на GitHub

2) Docs/UserManual.pdf - описание сервоприводов DynamixelWorkbench AX-12

3) Docs/Guide.pdf - туториал Андрея Клиновицкого для базового взаимодействия

